{
  "$schema": "http://json-schema.org/draft/2019-09/schema#",
  "$id": "https://devopsbox.io/schemas/aws/draft-01/box-yaml.schema.json",
  "title": "box.yaml",
  "description": "DevOpsBox application descriptor.",
  "anyOf": [
    {
      "$ref": "#/definitions/descriptorWithEnvironments",
      "examples": [
        {
          "app": {
            "port": 80
          }
        }
      ]
    },
    {
      "description": "Use the array format when you want to have more than one application in a single scm repository e.g. monorepo.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/descriptorWithEnvironments"
      },
      "examples": [
        [
          {
            "name": "test/app1",
            "app": {
              "build": {
                "dockerfile": "Dockerfile-app1"
              }
            }
          },
          {
            "name": "test/app2",
            "app": {
              "build": {
                "dockerfile": "Dockerfile-app2"
              }
            }
          }
        ]
      ]
    }
  ],
  "definitions": {
    "descriptorWithEnvironments": {
      "description": "Single application configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/descriptor"
        },
        {
          "properties": {
            "environments": {
              "description": "Map of all environments, will be generated in CI/CD. You can add environment specific configurations here.",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/descriptor"
              }
            }
          },
          "examples": [
            {
              "app": {
                "resources": {
                  "min": {
                    "cpu": "200m",
                    "memory": "512Mi"
                  }
                }
              },
              "environments": {
                "dev": {
                  "app": {
                    "resources": {
                      "min": {
                        "cpu": "400m",
                        "memory": "1024Mi"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      ]
    },
    "descriptor": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Application name. Autogenerated when not specified. Required when you have more than one application without name in a single box.yaml.",
          "type": "string"
        },
        "app": {
          "description": "Application build and deployment configuration.",
          "$ref": "#/definitions/awsAppConfig"
        },
        "pre_deployment": {
          "description": "Pre deployment build and deployment configuration.",
          "$ref": "#/definitions/oneOffConfig"
        },
        "post_deployment": {
          "description": "Post deployment build and deployment configuration.",
          "$ref": "#/definitions/oneOffConfig"
        },
        "backing_services": {
          "description": "Configuration of backing services. Will be created by DevOpsBox during the deployment process.",
          "$ref": "#/definitions/backingServices"
        },
        "docker": {
          "description": "Docker related properties.",
          "type": "object",
          "properties": {
            "registry": {
              "description": "Docker registry used by this DevOpsBox installation.",
              "type": "string",
              "readOnly": true
            }
          }
        },
        "box": {
          "description": "DevOpsBox specific properties.",
          "type": "object",
          "properties": {
            "environment": {
              "description": "Name of the environment. Can be used to inject into another part of box.yaml in the deployment process.",
              "type": "string",
              "readOnly": true
            },
            "platform_keycloak": {
              "description": "Properties needed for integration with platform Keycloak. Do not use for non-platform (i.e. business) applications.",
              "type": "object",
              "properties": {
                "url": {
                  "description": "Platform Keycloak in-cluster url.",
                  "type": "string",
                  "readOnly": true
                },
                "external_url": {
                  "description": "Platform Keycloak external url, accessible from the browser.",
                  "type": "string",
                  "readOnly": true
                },
                "needs_client_registeration_token": {
                  "description": "Set this to true if you want DevOpsBox to generate a client registeration token to integrate with platform Keycloak.",
                  "type": "boolean"
                }
              }
            },
            "platform_config_dir": {
              "description": "DevOpsBox platform configuration directory properties.",
              "type": "object",
              "properties": {
                "description": "Url of DevOpsBox platform configuration directory.",
                "url": {
                  "type": "string",
                  "readOnly": "true"
                }
              }
            },
            "deployed": {
              "description": "Provides information about other applications deployed with DevOpsBox. Can be used to inject into another part of box.yaml in the deployment process.",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/deployedApplication"
              },
              "readOnly": true
            },
            "last_successful_build_commit": {
              "description": "Set to last successful build commit when can be found (it is not 100% guaranteed to be found).",
              "type": "string",
              "readOnly": true
            }
          }
        },
        "sso": {
          "description": "Cognito integration related properties.",
          "type": "object",
          "properties": {
            "client": {
              "description": "Cognito properties for client (UI) application.",
              "type": "object",
              "required": [
                "user_pool"
              ],
              "properties": {
                "user_pool": {
                  "description": "User pool name.",
                  "type": "string"
                },
                "identity_providers": {
                  "description": "Identity providers which you want to use in you application.",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "Google",
                      "Facebook"
                    ]
                  }
                },
                "callback_path": {
                  "description": "Path of your application that will be used as callback after successful login.",
                  "type": "string",
                  "default": "/"
                },
                "logout_path": {
                  "description": "Path of your application that will be used as callback after successful logout.",
                  "type": "string",
                  "default": "/logout/"
                },
                "domain": {
                  "description": "Domain used by cognito for hosted ui and federation with social identity providers.",
                  "type": "string",
                  "readOnly": true
                },
                "user_pool_id": {
                  "description": "Cognito user pool id.",
                  "type": "string",
                  "readOnly": true
                },
                "user_pool_client_id": {
                  "description": "Cognito user pool client id.",
                  "type": "string",
                  "readOnly": true
                }
              }
            },
            "server": {
              "description": "Cognito properties for server application.",
              "type": "object",
              "required": [
                "user_pool"
              ],
              "properties": {
                "user_pool": {
                  "description": "User pool name.",
                  "type": "string"
                },
                "jwks_uri": {
                  "description": "Uri of jwks - need to validate jwt tokens.",
                  "type": "string",
                  "readOnly": true
                }
              }
            }
          }
        },
        "aws": {
          "description": "AWS specific properties.",
          "type": "object",
          "properties": {
            "default_region": {
              "description": "Default AWS region of this DevOpsBox instance",
              "type": "string",
              "readOnly": true
            },
            "current_account": {
              "description": "AWS account name on which this application is deployed",
              "type": "string",
              "readOnly": true
            },
            "current_account_id": {
              "description": "AWS account id on which this application is deployed",
              "type": "string",
              "readOnly": true
            },
            "accounts_with_k8s": {
              "description": "List of all account names of this DevOpsBox instance where Kubernetes clusters are created and you can deploy your applications.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "readOnly": true
            }
          }
        }
      }
    },
    "awsAppConfig": {
      "description": "Application config with extensions for AWS.",
      "allOf": [
        {
          "$ref": "#/definitions/appConfig"
        },
        {
          "properties": {
            "spot_allowed": {
              "description": "Can DevOpsBox use spot instances to deploy this application?",
              "type": "boolean"
            },
            "public": {
              "description": "If set to true, application will be accessible in open internet (without VPN connection). This property overrides value of the internal property.",
              "type": "boolean",
              "default": false
            },
            "custom_iam": {
              "description": "Custom IAM policy for this application. Useful when you are writing application which will create AWS resources using AWS SDK. Every item in this array will be translated to a statement in IAM policy.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "actions": {
                    "description": "AWS API actions allowed to call by this application.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "resources": {
                    "description": "AWS resources which the application can call actions on.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      ]
    },
    "appConfig": {
      "description": "Basic application config properties.",
      "allOf": [
        {
          "$ref": "#/definitions/stageConfig"
        },
        {
          "properties": {
            "port": {
              "description": "Port on which application is listening on. Usually same as EXPOSE instruction in your Dockerfile.",
              "type": "integer",
              "default": 8080
            },
            "service_port": {
              "description": "Kubernetes service port. You probably shouldn't change it.",
              "type": "integer",
              "default": 80
            },
            "replicas": {
              "description": "Initial number of replicas/instances of your application. Default 2 for stateless applications and 1 for stateful.",
              "type": "integer"
            },
            "stateful": {
              "description": "Is application stateful? If true it will be deployed as a StatefulSet in Kubernetes, if false DevOpsBox will use standard Deployment Kubernetes resource.",
              "type": "boolean"
            },
            "subdomain": {
              "description": "Set it if you want your application to be deployed with a custom subdomain. If not set, DevOpsBox will choose one for you.",
              "type": "string"
            },
            "additional_domains": {
              "description": "Application will be available on these additional domains. You can use wildcards here. You can use only subdomains of domains configured in DevOpsBox platform configuration.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "context": {
              "description": "Set it if you want your application to be deployed with custom context path. If not set, application will be deployed on root context.",
              "type": "string"
            },
            "cors_policy": {
              "description": "Cors policy properties.",
              "type": "object",
              "properties": {
                "allow_origin": {
                  "description": "Allow origin domains. You can use wildcards in subdmain names - istio will handle it.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "allow_headers": {
                  "description": "Allow origin headers.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "parent_domain": {
              "description": "Parent domain used in this AWS account.",
              "type": "string",
              "readOnly": true
            },
            "version": {
              "description": "Your application version.",
              "type": "string",
              "readOnly": true
            },
            "internal": {
              "description": "If set to true (which is default), your application will be only accessible inside a Kubernetes cluster. Set to false if you want to access your application in the browser.",
              "type": "boolean",
              "default": true
            },
            "authorized_apps": {
              "description": "List of applications authorized to call this application. Can be a simple list of strings or complex objects.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "description": "Reference to the other application.",
                    "type": "string",
                    "examples": [
                      {
                        "app": {
                          "authorized_apps": [
                            "proj.super-backend-app"
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "description": "Complex object to represent more complicated cases of application references.",
                    "type": "object",
                    "properties": {
                      "app": {
                        "description": "Reference to the other application.",
                        "type": "string"
                      },
                      "environment": {
                        "description": "Environment on which the other application is deployed. Set it if you want to permit calls from application from other environments. It works only inside single Kubernetes cluster!",
                        "type": "string"
                      },
                      "one_off_task_type": {
                        "description": "Set it if you want to permit pre or post deployment of another application to access your application.",
                        "type": "string",
                        "enum": [
                          "pre_deployment",
                          "post_deployment"
                        ]
                      }
                    },
                    "examples": [
                      {
                        "app": {
                          "authorized_apps": [
                            {
                              "app": "proj.super-backend-app",
                              "environment": "dev2"
                            }
                          ]
                        }
                      }
                    ]
                  }
                ]
              }
            },
            "resources": {
              "description": "Properties used to specify resources used by your application. These are mainly used by the Vertical Pod Autoscaler",
              "type": "object",
              "properties": {
                "initial": {
                  "description": "Initial value used to set resources when the application is deployed for the first time on this environment.",
                  "type": "object",
                  "properties": {
                    "limits": {
                      "description": "Initial limit of cpu and memory. Defaults are cpu=1000m, memory=256Mi.",
                      "$ref": "#/definitions/resourceSpec"
                    },
                    "requests": {
                      "description": "Initial requests of cpu and memory. Defaults are cpu=250m, memory=256Mi.",
                      "$ref": "#/definitions/resourceSpec"
                    }
                  }
                },
                "min": {
                  "description": "Minimum cpu and memory boundary for Vertical Pod Autoscaler. Defaults are cpu=100m, memory=64Mi.",
                  "$ref": "#/definitions/resourceSpec"
                },
                "max": {
                  "description": "Maximum cpu and memory boundary for Vertical Pod Autoscaler. Defaults are cpu=4000m, memory=4Gi.",
                  "$ref": "#/definitions/resourceSpec"
                }
              }
            },
            "domain": {
              "description": "Full domain of your deployed application. You can not set it but you can change it indirectly using the subdomain property.",
              "type": "string",
              "readOnly": true
            },
            "external_url": {
              "description": "External url (accessible from the browser) of your deployed application. You can not set it but you can change it indirectly using the subdomain and context properties.",
              "type": "string",
              "readOnly": true
            },
            "url": {
              "description": "In-cluster url of your deployed application. You should use it for application - to application communication.",
              "type": "string",
              "readOnly": true
            }
          }
        }
      ]
    },
    "oneOffConfig": {
      "description": "One off task (pre deployment or post deployment) configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/stageConfig"
        },
        {
          "properties": {
            "resources": {
              "description": "Properties used to specify resources used by your pre or post deployment.",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limit of cpu and memory. Defaults are cpu=1000m, memory=128Mi.",
                  "$ref": "#/definitions/resourceSpec"
                },
                "requests": {
                  "description": "Requests of cpu and memory. Defaults are cpu=100m, memory=128Mi.",
                  "$ref": "#/definitions/resourceSpec"
                }
              }
            }
          }
        }
      ]
    },
    "deployedApplication": {
      "description": "Provides information about other applications deployed with DevOpsBox.",
      "type": "object",
      "properties": {
        "url": {
          "description": "Other application's in-cluster url.",
          "type": "string"
        },
        "external_url": {
          "description": "Other application's external url (can be used in the browser).",
          "type": "string"
        },
        "domain": {
          "description": "Other application's external domain.",
          "type": "string"
        },
        "backing_services": {
          "description": "Other application's backing services. Use it if you need to access a backing service of another application e.g. you have a single Kafka cluster per environment.",
          "$ref": "#/definitions/backingServices"
        }
      }
    },
    "backingServices": {
      "type": "object",
      "additionalProperties": {
        "oneOf": [
          {
            "$ref": "#/definitions/s3BackingService"
          },
          {
            "$ref": "#/definitions/awsElasticsearchBackingService"
          },
          {
            "$ref": "#/definitions/awsKafkaBackingService"
          },
          {
            "$ref": "#/definitions/awsPostgresqlBackingService"
          }
        ]
      }
    },
    "awsElasticsearchBackingService": {
      "description": "AWS Elasticsearch backing service properties.",
      "allOf": [
        {
          "$ref": "#/definitions/elasticsearchBackingService"
        },
        {
          "properties": {
            "instance_type": {
              "description": "Instance type. Pricing is available here: https://aws.amazon.com/elasticsearch-service/pricing/.",
              "type": "string",
              "default": "m5.large.elasticsearch"
            },
            "volume_size": {
              "description": "Size of a volume for each instance.",
              "type": "integer",
              "default": 334
            },
            "elasticsearch_version": {
              "description": "Elasticsearch version.",
              "type": "string",
              "default": "7.4"
            },
            "instance_count": {
              "description": "Number of instances in a cluster.",
              "type": "integer",
              "default": 1
            },
            "destination_port": {
              "description": "Target port of AWS Elasticsearch. You will probably never use this field.",
              "type": "integer",
              "default": 443,
              "readOnly": true
            },
            "port": {
              "description": "Port on which application should access Elasticsearch. Istio will encrypt the traffic (TLS origination).",
              "type": "integer",
              "default": 80
            }
          }
        }
      ]
    },
    "awsKafkaBackingService": {
      "description": "AWS Kafka (MSK) backing service properties.",
      "allOf": [
        {
          "$ref": "#/definitions/kafkaBackingService"
        },
        {
          "properties": {
            "kafka_version": {
              "description": "Kafka version.",
              "type": "string",
              "default": "2.4.1"
            },
            "instance_type": {
              "description": "Instance type. Pricing is available here: https://aws.amazon.com/msk/pricing/.",
              "type": "string",
              "default": "kafka.t3.small"
            },
            "volume_size": {
              "description": "Size of a volume for each instance.",
              "type": "integer",
              "default": 334
            },
            "number_of_broker_nodes": {
              "description": "Number of broker instance in a cluster.",
              "type": "integer",
              "default": 2
            },
            "port": {
              "description": "Kafka port. AWS Kafka uses TLS encryption.",
              "type": "integer",
              "default": 9094
            }
          }
        }
      ]
    },
    "awsPostgresqlBackingService": {
      "description": "AWS PostgreSQL RDS backing service properties.",
      "allOf": [
        {
          "$ref": "#/definitions/postgresqlBackingService"
        },
        {
          "properties": {
            "db_instance_class": {
              "description": "Instance type. Pricing is available here: https://aws.amazon.com/rds/postgresql/pricing/.",
              "type": "string",
              "default": "db.t2.small"
            },
            "allocated_storage": {
              "description": "Storage size.",
              "type": "string",
              "default": "20"
            }
          }
        }
      ]
    },
    "s3BackingService": {
      "description": "S3 backing service properties.",
      "allOf": [
        {
          "$ref": "#/definitions/backingService"
        },
        {
          "properties": {
            "buckets": {
              "description": "Map of s3 buckets.",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "versioned": {
                    "description": "Should versioning be enabled?",
                    "type": "boolean"
                  },
                  "name": {
                    "description": "Declared bucket name. This is only logical name and will not be used as a bucket name, it is only a part of it.",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      ]
    },
    "elasticsearchBackingService": {
      "description": "Elasticsearch backing service properties.",
      "allOf": [
        {
          "$ref": "#/definitions/backingService"
        },
        {
          "properties": {
            "endpoint_address": {
              "description": "Elasticsearch endpoint address. Use it to access an Elasticsearch cluster.",
              "type": "string",
              "readOnly": true
            }
          }
        }
      ]
    },
    "kafkaBackingService": {
      "description": "Kafka backing service properties.",
      "allOf": [
        {
          "$ref": "#/definitions/backingService"
        },
        {
          "properties": {
            "bootstrap_servers": {
              "description": "Kafka bootstrap servers. Use it to access a Kafka cluster.",
              "type": "string"
            }
          }
        }
      ]
    },
    "postgresqlBackingService": {
      "description": "PostgreSQL backing service properties.",
      "allOf": [
        {
          "$ref": "#/definitions/backingService"
        },
        {
          "properties": {
            "db_endpoint_address": {
              "description": "Endpoint address. Use it to access a Kafka cluster.",
              "type": "string"
            },
            "db_port": {
              "description": "Database port.",
              "type": "integer",
              "default": 5432
            },
            "db_name": {
              "description": "Application database name.",
              "type": "string",
              "default": "app"
            },
            "db_user": {
              "description": "Application user name.",
              "type": "string",
              "default": "app"
            },
            "db_password": {
              "description": "Autogenerated application password. Use only in secrets map!",
              "type": "string",
              "readOnly": true
            },
            "master_username": {
              "description": "Postgres admin user name.",
              "type": "string",
              "default": "postgres"
            }
          }
        }
      ]
    },
    "backingService": {
      "description": "Base type for all backing services.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Should be specified when map key name is different than backing service type. See an example.",
          "type": "string",
          "examples": [
            {
              "backing_services": {
                "postgresql2": {
                  "type": "postgresql"
                }
              }
            }
          ]
        }
      }
    },
    "stageConfig": {
      "type": "object",
      "description": "Base structure for app and one off (post and pre deployment) configs.",
      "properties": {
        "enabled": {
          "description": "Is this stage enabled? If a stage is specified in config, it is enabled. App stage is enabled even if not specified.",
          "type": "boolean"
        },
        "env": {
          "description": "Map of environment variables used to configure your application. Do not pass secrets here!",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "secrets": {
          "description": "Map of secrets used to configure your application.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "examples": [
            {
              "app": {
                "secrets": {
                  "DATABASE_PASSWORD": "backing_services.postgresql.db_password"
                }
              }
            }
          ]
        },
        "args": {
          "description": "Array of args to be passed to your application while starting the container.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "volumes": {
          "description": "List of volumes used by your application. Supported only in stateful applications.",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "$ref": "#/definitions/volume"
          }
        },
        "pod": {
          "description": "Pod specific properties. Can be used for pod to pod communication.",
          "type": "object",
          "properties": {
            "ip": {
              "description": "Pod ip.",
              "type": "string",
              "readOnly": true
            },
            "parent_domain": {
              "description": "Pod in-cluster parent domain.",
              "type": "string",
              "readOnly": true
            }
          }
        },
        "build": {
          "description": "Properties related to application build.",
          "type": "object",
          "properties": {
            "context": {
              "description": "Build context subdirectory. Same as docker build context.",
              "type": "string",
              "default": "."
            },
            "dockerfile": {
              "description": "Dockerfile path.",
              "type": "string",
              "default": "Dockerfile"
            },
            "build_target": {
              "description": "Name of the build stage. Used as docker build --target while building the build stage.",
              "type": "string",
              "default": "build"
            },
            "build_output_dir": {
              "description": "The output dir of your application build. Default is for gradle builds.",
              "type": "string",
              "default": "build"
            },
            "test_results_dir": {
              "description": "Test results dir of your application build. Default is for gradle builds.",
              "type": "string",
              "default": "build/test-results"
            },
            "docker_repository_suffix": {
              "description": "This field should not be used.",
              "type": "string"
            },
            "fetch_branches": {
              "description": "Additional branches to be fetched before the build.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "content_trust_disabled": {
              "description": "Property unused - ECR does not support content trust.",
              "type": "boolean"
            },
            "args": {
              "description": "Map of build args. Same as docker build --build-arg.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "resources": {
              "description": "Properties used to specify resources used by your build.",
              "type": "object",
              "properties": {
                "limits": {
                  "description": "Limit of cpu and memory. Defaults are cpu=4000m, memory=2048Mi.",
                  "$ref": "#/definitions/resourceSpec"
                },
                "requests": {
                  "description": "Requests of cpu and memory. Defaults are cpu=250m, memory=2048Mi.",
                  "$ref": "#/definitions/resourceSpec"
                }
              }
            }
          }
        }
      }
    },
    "volume": {
      "description": "Volume properties.",
      "type": "object",
      "properties": {
        "path": {
          "description": "Volume mount path.",
          "type": "string"
        },
        "size": {
          "description": "Volume size.",
          "type": "string"
        }
      }
    },
    "resourceSpec": {
      "description": "Resources specification properties.",
      "type": "object",
      "properties": {
        "cpu": {
          "description": "Cpu resource specification. You should use Kubernetes cpu resource format. Please see https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu",
          "type": "string"
        },
        "memory": {
          "description": "Memory resource specification. You should use Kubernetes memory resource format. Please see https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory",
          "type": "string"
        }
      }
    }
  }
}
